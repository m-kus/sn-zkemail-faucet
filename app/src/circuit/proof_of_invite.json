{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":9319700679866335153,"abi":{"parameters":[{"name":"header","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":768,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"pubkey","type":{"kind":"struct","path":"zkemail::dkim::RSAPubkey","fields":[{"name":"modulus","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"from_header_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from_address_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"array","length":2,"type":{"kind":"field"}},{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":320,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}]},"visibility":"public"},"error_types":{"2121844606697934511":{"error_kind":"string","string":"Email address must start with an acceptable character"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4240586432187010441":{"error_kind":"string","string":"Email address must start immediately after '<' if bracket is present"},"4524007320076231485":{"error_kind":"string","string":"Header field out of bounds of header"},"4540277600904443375":{"error_kind":"string","string":"Email address must end with an acceptable character"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5466606472443271855":{"error_kind":"string","string":"Header field must not contain newlines"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8707862474619154823":{"error_kind":"string","string":"Email address must only contain acceptable characters"},"8968308905366009901":{"error_kind":"string","string":"Email address sequence out of bounds"},"9619408434855056367":{"error_kind":"string","string":"Header field name must be followed by a colon"},"11883698362854120768":{"error_kind":"string","string":"Header field must start with CRLF"},"12712340723692189130":{"error_kind":"string","string":"Header field name does not match"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14734181347393705282":{"error_kind":"string","string":"Header field must end with CRLF"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    /// Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        /// Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        /// Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        /// Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"62":{"source":"use std::{collections::bounded_vec::BoundedVec, hash::pedersen_hash};\nuse zkemail::{\n    dkim::RSAPubkey, headers::email_address::get_email_address, Sequence,\n};\n\nglobal MAX_EMAIL_HEADER_LENGTH: u32 = 768;\nglobal MAX_EMAIL_ADDRESS_LENGTH: u32 = 320;\nglobal KEY_LIMBS_2048: u32 = 18;\n\n/**\n * Verify an arbitrary email signed by a 2048-bit RSA DKIM signature and extract sender address\n * @dev example of only constraining access to the header too\n *\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n * @param from_header_sequence - The index and length of the \"From\" header field\n * @param from_address_sequence - The index and length of the \"From\" email address\n * @return - \n *         0: Pedersen hash of DKIM public key (root of trust)\n *         1: Pedersen hash of DKIM signature (email nullifier)\n */\nfn main(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n    from_header_sequence: Sequence,\n    from_address_sequence: Sequence,\n    ) -> pub ([Field; 2], BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH>) {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    let from = comptime { \"from\".as_bytes() };\n    let from_address = get_email_address(header, from_header_sequence, from_address_sequence, from);\n\n    // hash the pubkey and signature for the standard outputs\n    let email_nullifier = pedersen_hash(signature);\n    let standard_out = [pubkey.hash(), email_nullifier];\n    (standard_out, from_address)\n}\n","path":"/Users/michaelzaikin/starknet-noir-demo/circuit/src/main.nr"},"63":{"source":"use crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, RSA_EXPONENT};\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse rsa::{rsa::verify_sha256_pkcs1v15, types::{RBN1024, RBN2048}};\nuse std::hash::{pedersen_hash, sha256_var};\n\npub struct RSAPubkey<let KEY_LIMBS: u32> {\n    modulus: [Field; KEY_LIMBS],\n    redc: [Field; KEY_LIMBS],\n}\n\nimpl<let KEY_LIMBS: u32> RSAPubkey<KEY_LIMBS> {\n\n    pub fn new(modulus: [Field; KEY_LIMBS], redc: [Field; KEY_LIMBS]) -> Self {\n        let pubkey = Self { modulus, redc };\n        pubkey\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_1024> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_1024],\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_1024, 1024> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN1024 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n    }\n\n    pub fn hash(self) -> Field {\n        // validate\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 9];\n        // compose first 4 limbs of modulus and redc\n        for i in 0..4 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 4] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // compose last two elements of redc and modulus together\n        let modulus_hi = self.modulus[8] * 2.pow_32(120);\n        dkim_preimage[8] = modulus_hi + self.redc[8];\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_1024 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_1024 - 1].assert_max_bit_size::<1024 - ((KEY_LIMBS_1024 - 1) * 120)>();\n        self.redc[KEY_LIMBS_1024 - 1].assert_max_bit_size::<120>();\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_2048> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_2048],\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_2048, 2048> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN2048 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n    }\n\n    pub fn hash(self) -> Field {\n        // validate range\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 18];\n        // compose limbs\n        for i in 0..9 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 9] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_2048 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_2048 - 1].assert_max_bit_size::<2048 - ((KEY_LIMBS_2048 - 1) * 120)>();\n        self.redc[KEY_LIMBS_2048 - 1].assert_max_bit_size::<120>(); // we get 2053 sometimes?\n    }\n}\n","path":"/Users/michaelzaikin/nargo/github.com/zkemail/zkemail.nr/v0.4.2/lib/src/dkim.nr"},"65":{"source":"use crate::{\n    EMAIL_ADDRESS_CHAR_TABLE, headers::constrain_header_field_detect_last_angle_bracket,\n    MAX_EMAIL_ADDRESS_LENGTH, Sequence,\n};\n\npub fn get_email_address<let MAX_HEADER_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    email_address_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) -> BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> {\n    // check field is uninterrupted and matches the expected field name\n    let last_angle_bracket = constrain_header_field_detect_last_angle_bracket::<MAX_HEADER_LENGTH, MAX_EMAIL_ADDRESS_LENGTH + HEADER_FIELD_NAME_LENGTH + 1, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n    // if angle bracket found, assert index is +1\n    if last_angle_bracket != 0 {\n        assert(\n            email_address_sequence.index == last_angle_bracket + 1,\n            \"Email address must start immediately after '<' if bracket is present\",\n        );\n    }\n    // check email sequence is within header field\n    assert(\n        email_address_sequence.index >= header_field_sequence.index\n            & email_address_sequence.end_index() <= header_field_sequence.end_index(),\n        \"Email address sequence out of bounds\",\n    );\n\n    // constrained get email address\n    parse_email_address(header, email_address_sequence)\n}\n\npub fn parse_email_address<let MAX_HEADER_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    email_address_sequence: Sequence,\n) -> BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> {\n    // check the sequence is proceeded by an acceptable character\n    if email_address_sequence.index != 0 {\n        assert(\n            EMAIL_ADDRESS_CHAR_TABLE[header.get_unchecked(email_address_sequence.index - 1)] == 2,\n            \"Email address must start with an acceptable character\",\n        );\n    }\n    if email_address_sequence.end_index() < header.len() {\n        assert(\n            EMAIL_ADDRESS_CHAR_TABLE[header.get_unchecked(\n                email_address_sequence.index + email_address_sequence.length,\n            )]\n                == 3,\n            \"Email address must end with an acceptable character\",\n        );\n    }\n    // check the email address and assign\n    let mut email_address: BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> = BoundedVec::new();\n    for i in 0..MAX_EMAIL_ADDRESS_LENGTH {\n        let index = email_address_sequence.index + i;\n        if index < email_address_sequence.end_index() {\n            let letter = header.get_unchecked(index);\n            email_address.set_unchecked(i, letter);\n            assert(\n                EMAIL_ADDRESS_CHAR_TABLE[letter] == 1,\n                \"Email address must only contain acceptable characters\",\n            );\n        }\n    }\n    email_address.len = email_address_sequence.length;\n    // todo: should probably introduce a check for @\n    email_address\n}\n\n","path":"/Users/michaelzaikin/nargo/github.com/zkemail/zkemail.nr/v0.4.2/lib/src/headers/email_address.nr"},"66":{"source":"use crate::{CR, LF, Sequence};\n\npub mod body_hash;\npub mod email_address;\n\n/**\n * Constrain a sequence in a header to be within the correct bounds\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - The length of the header field name\n * @param header - The email header as validated in the DKIM signature\n * @param header_field_sequence - The sequence of the header field\n * @param header_field_name - The name of the header field\n */\nfn check_header_field_bounds<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) {\n    // check the range of the sequence is within the header (so we can use get_unchecked)\n    let end_index = header_field_sequence.end_index();\n    assert(end_index <= header.len(), \"Header field out of bounds of header\");\n\n    // if the sequence is not the start, check for a newline\n    if header_field_sequence.index != 0 {\n        assert(\n            header.get_unchecked(header_field_sequence.index - 2) == CR,\n            \"Header field must start with CRLF\",\n        );\n        assert(\n            header.get_unchecked(header_field_sequence.index - 1) == LF,\n            \"Header field must start with CRLF\",\n        );\n    }\n\n    // if the sequence is not the end, check for a newline\n    if end_index != header.len() {\n        assert(header.get_unchecked(end_index) == CR, \"Header field must end with CRLF\");\n        assert(header.get_unchecked(end_index + 1) == LF, \"Header field must end with CRLF\");\n    }\n\n    // check that the header field name matches the expected name\n    for i in 0..HEADER_FIELD_NAME_LENGTH {\n        assert(\n            header.get_unchecked(header_field_sequence.index + i) == header_field_name[i],\n            \"Header field name does not match\",\n        );\n    }\n    assert(\n        header.get_unchecked(header_field_sequence.index + HEADER_FIELD_NAME_LENGTH) == 0x3a,\n        \"Header field name must be followed by a colon\",\n    );\n}\n\n/**\n * Constrain a sequence in a header to match the specific header field\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - The length of the header field name\n * @param header - The email header as validated in the DKIM signature\n * @param header_field_sequence - The sequence of the header field\n * @param header_field_name - The name of the header field\n */\npub fn constrain_header_field<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) {\n    // constrain beginning of header field\n    check_header_field_bounds::<MAX_HEADER_LENGTH, MAX_HEADER_FIELD_LENGTH, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n\n    // check the header field is uninterrupted\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in 0..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.end_index()) {\n            assert(header.get_unchecked(index) != CR, \"Header field must not contain newlines\");\n        }\n    }\n}\n\n/**\n * constrain_header_field with checks for the last occurence of \"<\" inside the loop to save constraints\n */\npub fn constrain_header_field_detect_last_angle_bracket<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) -> u32 {\n    // constrain beginning of header field\n    check_header_field_bounds::<MAX_HEADER_LENGTH, MAX_HEADER_FIELD_LENGTH, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n\n    // check the header field is uninterrupted\n    let mut last_angle_bracket = 0;\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in (HEADER_FIELD_NAME_LENGTH + 1)..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.end_index()) {\n            let byte = header.get_unchecked(index);\n            assert(byte != CR, \"Header field must not contain newlines\");\n            if byte == 0x3c {\n                last_angle_bracket = index;\n            }\n        }\n    }\n    last_angle_bracket\n}\n","path":"/Users/michaelzaikin/nargo/github.com/zkemail/zkemail.nr/v0.4.2/lib/src/headers/mod.nr"},"67":{"source":"use std::hash::pedersen_hash;\npub mod dkim;\npub mod headers;\npub mod masking;\npub mod partial_hash;\npub mod remove_soft_line_breaks;\nmod tests;\n\nglobal RSA_EXPONENT: u32 = 65537;\nglobal KEY_LIMBS_1024: u32 = 9;\nglobal KEY_LIMBS_2048: u32 = 18;\nglobal BODY_HASH_BASE64_LENGTH: u32 = 44;\nglobal CR: u8 = 0x0D;\nglobal LF: u8 = 0x0A;\nglobal MAX_DKIM_HEADER_FIELD_LENGTH: u32 = 300; // kinda arbitrary but gives > 100 chars for selector and domain\nglobal MAX_EMAIL_ADDRESS_LENGTH: u32 = 320; // derived via (https://datatracker.ietf.org/doc/html/rfc5321#section-4.5.3.1.1)\n\npub struct Sequence {\n    index: u32,\n    length: u32,\n}\n\nimpl Sequence {\n    pub fn end_index(self) -> u32 {\n        self.index + self.length\n    }\n}\n// allowable chars in an email address (js/src/utils:makeAllowableEmailCharsTable()\n// \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-@\" = 1\n// \"<: \" = 2\n// \">\\r\\n\" = 3\nglobal EMAIL_ADDRESS_CHAR_TABLE: [u8; 123] = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 3, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n\n/**\n * Create a nullifier for a signature with a blinding factor\n *\n * @param signature - The signature to nullify\n * @param nonce - The nonce to use in the nullifier as a blinding factor\n * @return - The blinded nullifier for the signature\n */\npub fn blinded_nullifier<let KEY_LIMBS: u32>(signature: [Field; KEY_LIMBS], nonce: Field) -> Field {\n    let preimage = unsafe { __blinded_nullifier(signature, nonce) };\n    for i in 0..KEY_LIMBS {\n        assert(preimage[i] == signature[i], \"Preimage does not contain signature\");\n    }\n    assert(preimage[KEY_LIMBS] == nonce, \"Preimage does not contain nonce\");\n    pedersen_hash(preimage)\n}\n\n/**\n * Builds the nullifier preimage with a nonce\n * @notice the nonce should be governed at the app level - i.e. an aztec note can pass this in\n * \n * @param signature - The signature to nullify\n * @param nonce - The nonce to use in the nullifier as a blinding factor\n */\nunconstrained fn __blinded_nullifier<let KEY_LIMBS: u32>(\n    signature: [Field; KEY_LIMBS],\n    nonce: Field,\n) -> [Field; KEY_LIMBS + 1] {\n    let mut nullifier_preimage = [0; KEY_LIMBS + 1];\n    for i in 0..KEY_LIMBS {\n        nullifier_preimage[i] = signature[i];\n    }\n    nullifier_preimage[KEY_LIMBS] = nonce;\n\n    nullifier_preimage\n}\n","path":"/Users/michaelzaikin/nargo/github.com/zkemail/zkemail.nr/v0.4.2/lib/src/lib.nr"},"109":{"source":"use crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_120: Field = 0x1000000000000000000000000000000;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> Field {\n    let TWO_POW_120 = 0x1000000000000000000000000000000;\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0]\n    } else if N == 2 {\n        validate_in_range::<N, MOD_BITS>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120 + limbs[2] * TWO_POW_120 * TWO_POW_120\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    field: Field,\n) -> [Field; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result = unsafe { __from_field::<N>(field) };\n\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        let TWO_POW_120 = 0x1000000000000000000000000000000;\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let field_val = if N < 2 {\n            result[0]\n        } else if N == 2 {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120\n        } else {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120 + result[2] * TWO_POW_120 * TWO_POW_120\n        };\n        assert(field_val == field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120;\n        r *= TWO_POW_120;\n        modulus_mod_n *= TWO_POW_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += params.modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [Field; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += borrow_flags[0] as Field * TWO_POW_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * TWO_POW_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    validate_in_range::<_, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb =\n            modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * TWO_POW_120);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * TWO_POW_120);\n            assert(result_limb == 0);\n        }\n        let result_limb =\n            modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb =\n            lhs[0] + rhs[0] - subtrahend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] + rhs[N - 1] - subtrahend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] - rhs[N - 1] + addend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/constrained_ops.nr"},"110":{"source":"use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/expressions.nr"},"112":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [Field; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = val[i].to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = val[N - 1].to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/serialization.nr"},"113":{"source":"use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [Field; N] {\n    // cast the field to a u60 representation\n    let res_u60: U60Repr<N, 2> = U60Repr::from_field(field);\n    let result: [Field; N] = U60Repr::into(res_u60);\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = From::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    b_u60 += U60Repr::one();\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = From::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let b_u60: U60Repr<N, 2> = From::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                let idx = (i - 1) / 2;\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] += partial_quotient_full[i] * modulus[j];\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus_normalized[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n\n        // Propagate higher bits to the next index\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus_normalized[i + 1] += hi;\n        }\n    }\n\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quirky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target.shr1();\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_helpers.nr"},"114":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n    let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n    divisor_u60 = divisor_u60.shl(bit_difference);\n    accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n    if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n        divisor_u60.shr1();\n        accumulator_u60.shr1();\n    }\n    for _ in 0..(N * 120) {\n        if (remainder_u60.gte(b) == false) {\n            break;\n        }\n\n        // we've shunted 'divisor' up to have the same bit length as our remainder.\n        // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n        if (remainder_u60.gte(divisor_u60)) {\n            remainder_u60 -= divisor_u60;\n            // we can use OR here instead of +, as\n            // accumulator is always a nice power of two\n            quotient_u60 = quotient_u60 + accumulator_u60;\n        }\n        divisor_u60.shr1(); // >>= 1;\n        accumulator_u60.shr1(); //  >>= 1;\n    }\n\n    (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let exp_u60 = params.modulus_u60 - (one_u60 + one_u60);\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..N {\n        let idx = N - 1 - i;\n        if (!__is_zero(x[idx])) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]] = [[0; N]];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n        result = result.push_back([0; N]);\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_ops.nr"},"116":{"source":"use crate::utils::u60_representation::U60Repr;\n\npub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [Field; N],\n\n    // @brief modulus but represented in a U60Repr form\n    pub modulus_u60: U60Repr<N, 2>,\n    pub modulus_u60_x4: U60Repr<N, 4>,\n\n    // @brief double_modulus: used when performing negations and subtractions\n    pub double_modulus: [Field; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [Field; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    pub fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [Field; N],\n        redc_param: [Field; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.modulus_u60 == other.modulus_u60)\n            & (self.modulus_u60_x4 == other.modulus_u60_x4)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/params.nr"},"117":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32>: Neg + Add + Sub + Mul + Div + Eq {\n    pub fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self;\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    pub fn modulus(self) -> Self;\n    pub fn modulus_bits() -> u32;\n    pub fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    pub fn get_limbs(self) -> [Field; N];\n    pub fn get_limb(self, idx: u32) -> Field;\n    pub fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    pub fn __neg(self) -> Self;\n    // unconstrained\n    pub fn __add(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __div(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    pub fn __invmod(self) -> Self;\n    // unconstrained\n    pub fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    pub fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    pub fn assert_is_not_equal(self, other: Self);\n    pub fn validate_in_field(self);\n    pub fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    pub fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    pub fn udiv(numerator: Self, divisor: Self) -> Self;\n    pub fn umod(numerator: Self, divisor: Self) -> Self;\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    pub fn is_zero(self) -> bool;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/runtime_bignum.nr"},"124":{"source":"global TWO_POW_56: u64 = 0x100000000000000;\npub(crate) global TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n//fields to u60rep conversion\n// field elements are 254 bits\n// so there will be 5 limbs\npub(crate) unconstrained fn field_to_u60rep(mut x: Field) -> (u64, u64, u64, u64, u64) {\n    // get the first 60 bits by casting to u64 and then taking the lower 60 bits\n    // we use the fact that this casting drops everything above 64 bits\n    let x_first_u64 = (x as u64);\n    let first: u64 = x_first_u64 % TWO_POW_60;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_60 as Field);\n    let x_second_u64 = (x as u64);\n    let second = x_second_u64 % TWO_POW_60;\n    x = (x - (second as Field)) / (TWO_POW_60 as Field);\n    let x_third_u64 = (x as u64);\n    let third = x_third_u64 % TWO_POW_60;\n    x = (x - (third as Field)) / (TWO_POW_60 as Field);\n    let x_fourth_u64 = (x as u64);\n    let fourth = x_fourth_u64 % TWO_POW_60;\n    x = (x - (fourth as Field)) / (TWO_POW_60 as Field);\n    let x_fifth_u64 = (x as u64);\n    let fifth = x_fifth_u64 % TWO_POW_60;\n    (first, second, third, fourth, fifth)\n}\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\nunconstrained fn __split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\npub fn split_60_bits(x: Field) -> (u64, u64) {\n    // We assert that the two returned limbs fit within 60 bits each\n    // and reconstruct `x` when added together.\n    let (lo, hi) = unsafe { __split_60_bits(x) };\n    if !std::runtime::is_unconstrained() {\n        let lo_field = lo as Field;\n        let hi_field = hi as Field;\n        lo_field.assert_max_bit_size::<60>();\n        hi_field.assert_max_bit_size::<60>();\n        assert_eq(lo_field + (TWO_POW_60 as Field) * hi_field, x);\n    }\n\n    (lo, hi)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n\n        normalized[i] = lo;\n        next = input[i + 1] + hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/split_bits.nr"},"125":{"source":"use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\nuse crate::utils::split_bits::{field_to_u60rep, TWO_POW_60};\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..N {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\n// impl<let N: u32, let NumSegments: u32> std::convert::From<Field> for U60Repr<N, NumSegments> {\n//     fn from(input: Field) -> Self {\n//        let (low, mid, high) =  unsafe { field_to_u60rep(input) } ;\n//         let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n//         let N_u60: u32 = N * NumSegments;\n//         assert(N_u60 >=1, \"N must be at least 1\");\n//         if N_u60 == 1 {\n//             assert((mid ==0) & (high == 0), \"input field is too large to fit in a single limb\");\n//             result.limbs[0] = low;\n//         }\n//         else if N_u60 == 2{\n//             assert(high == 0, \"input field is too large to fit in two limbs\");\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//         }else{\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//             result.limbs[2] = high;\n//         }\n//         result\n//     }\n// }\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn from_field(input: Field) -> Self {\n        let (first, second, third, fourth, fifth) = field_to_u60rep(input);\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        let N_u60: u32 = N * NumSegments;\n        assert(N_u60 >= 1, \"N must be at least 1\");\n        if N_u60 == 1 {\n            assert(\n                (second == 0) & (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in a single limb\",\n            );\n            result.limbs[0] = first;\n        } else if N_u60 == 2 {\n            assert(\n                (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in two limbs\",\n            );\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n        } else if N_u60 == 3 {\n            assert((fourth == 0) & (fifth == 0), \"input field is too large to fit in three limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n        } else if N_u60 == 4 {\n            assert((fifth == 0), \"input field is too large to fit in four limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n        } else {\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n            result.limbs[4] = fifth;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        for i in 0..(N * NumSegments / 2) {\n            result[i] =\n                x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * TWO_POW_60 as Field);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            let idx = (N * NumSegments) - 1 - i;\n            if (b.limbs[idx] == self.limbs[idx]) {\n                continue;\n            }\n\n            result = b.limbs[idx] < self.limbs[idx];\n            early_exit = true;\n            break;\n        }\n        if early_exit {\n            result\n        } else {\n            self.limbs[0] == b.limbs[0]\n        }\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift = (60 - limb_shift) as u8;\n        let mask: u64 = (((1 as u64) << limb_shift) - 1) << remainder_shift;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = value >> limb_shift;\n            let remainder: u64 = (value << remainder_shift) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << limb_shift) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << limb_shift) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/u60_representation.nr"},"136":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n","path":"/Users/michaelzaikin/nargo/github.com/noir-lang/noir_rsa/v0.5.1/lib/src/rsa.nr"}},"names":["main"],"brillig_names":["build_msg_block","attach_len_to_msg_block","__split_60_bits","__mul","__compute_quadratic_expression_with_borrow_flags","decompose_hint","directive_integer_quotient","directive_invert","directive_to_radix"]}